{"paragraphs":[{"text":"%md\n# Big Data Assignment\n#### By Greg Vesterink & Jeroen Koster\n__School:__ Saxion University \n__Teacher:__ H. Havinga\n## Introduction\n\n\nThis document contains the assignment for Big Data Conceptual and Technical specialisation course for the minor Co-Creation IT & Research at Saxion Enschede. The authors of this document are Jeroen Koster and Greg Vesterink. \n\nFor the assignment we combined multiple datasets and use the results for a proof of concept. It contains the gathering of data from different sources such as open databases, API or gathering the data ourselfs. After that the data needs to be cleaned and combined. At the end it it needs to be visualized.\n\n\n## Concept\n\n\nOur concept consists of combining a crypto-currency market dataset with data collected from Twitter, Reddit, and/or other social-media sources with a solid API. \n\nThe idea is to find out if we can create an application that gives a warning/message when sentiment-analysis on these social media sources gives us an indication that the market price of a certain crypto-currency is likely to climb/drop.\n\nIt would be nice if the message could show the statistics from which the indication was generated. (Twitter-sentiment analysis shows an X-percentage decline in sentiment score, Daily view / subscriptions on a certain subreddit increased by X-amount, etc)\n\n\n## Data sets\n\n\nEventually we will be using at least 3 different data sources, as stated in the assignment. Before we can decide which data sources to use, we need to find some sort of correlation between 2 or more of these sources. Because we haven’t gotten to the point of finding a correlation between these datasets, we will decide which sources suit our concept best as soon as possible. Below you can find a list with our current options as a datasource, which might be changed during this project. \n\n* Bitcoin Historical Data\n* TwitterAPI (with hashtags such as @btc, @bitcoin etc)\n* Google (to find changes in searches for questions like “how to buy/sell bitcoin”, “should I buy/sell bitcoin”)\n* GitHub (new major releases to the bitcoin core  codebase could trigger a price changes)\n* If possible, user growth statistics from popular apps like ‘CoinBase’\n\n## Roadblocks\nOne of the biggest roadblock is to define the emotion of the social media message, a message could be positive or negative or neither. It is crucial to define if a message is positive or negative so you can compare it to the value rise or drop of the currency.\n\nAnother possibility might be that we couldn't find any correlation between the social media messages and the rise and drop of the value. in that case it is not possible to make a end product. If we do find a correlation between the two there might also be a different reason behind the rise and drop that has nothing to do with the messages of social media.\n\n\n## Data\n\n\n//welke data wordt er gebruikt en hoe hebben we het verbouwd tot bruikbare data\n[test][]\n\n## API\n\n\n//API\n\n\n## Cleaning\n\n\nFor our concept the data needs little to no cleaning. The bitcoin value data is already structured data so this need no further cleaning. The data acquired from social media is already filtered so we only get the data we’re going to use.\n// misschien een screenshot hoe de data er uit ziet\n\n[TOC]\n\n- # Database\n- # UI design\n= # Conclusion\n\n\n\n\n\n## Database\n\n\n// welke database we gebruiken en waar de relaties liggen\n\n\n## UI design\n\n\n// hoe ziet de UI eruit wat dingen uit zeppelin laten zien\n\n\n## Conclusion\n\n\n// Beschrijven van de resultaten \n\"[test]\"\n\n\n","user":"anonymous","dateUpdated":"2018-07-12T19:29:52+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Big Data Assignment</h1>\n<h4>By Greg Vesterink &amp; Jeroen Koster</h4>\n<p><strong>School:</strong> Saxion University<br/><strong>Teacher:</strong> H. Havinga</p>\n<h2>Introduction</h2>\n<p>This document contains the assignment for Big Data Conceptual and Technical specialisation course for the minor Co-Creation IT &amp; Research at Saxion Enschede. The authors of this document are Jeroen Koster and Greg Vesterink. </p>\n<p>For the assignment we combined multiple datasets and use the results for a proof of concept. It contains the gathering of data from different sources such as open databases, API or gathering the data ourselfs. After that the data needs to be cleaned and combined. At the end it it needs to be visualized.</p>\n<h2>Concept</h2>\n<p>Our concept consists of combining a crypto-currency market dataset with data collected from Twitter, Reddit, and/or other social-media sources with a solid API. </p>\n<p>The idea is to find out if we can create an application that gives a warning/message when sentiment-analysis on these social media sources gives us an indication that the market price of a certain crypto-currency is likely to climb/drop.</p>\n<p>It would be nice if the message could show the statistics from which the indication was generated. (Twitter-sentiment analysis shows an X-percentage decline in sentiment score, Daily view / subscriptions on a certain subreddit increased by X-amount, etc)</p>\n<h2>Data sets</h2>\n<p>Eventually we will be using at least 3 different data sources, as stated in the assignment. Before we can decide which data sources to use, we need to find some sort of correlation between 2 or more of these sources. Because we haven’t gotten to the point of finding a correlation between these datasets, we will decide which sources suit our concept best as soon as possible. Below you can find a list with our current options as a datasource, which might be changed during this project. </p>\n<ul>\n  <li>Bitcoin Historical Data</li>\n  <li>TwitterAPI (with hashtags such as @btc, @bitcoin etc)</li>\n  <li>Google (to find changes in searches for questions like “how to buy/sell bitcoin”, “should I buy/sell bitcoin”)</li>\n  <li>GitHub (new major releases to the bitcoin core codebase could trigger a price changes)</li>\n  <li>If possible, user growth statistics from popular apps like ‘CoinBase’</li>\n</ul>\n<h2>Roadblocks</h2>\n<p>One of the biggest roadblock is to define the emotion of the social media message, a message could be positive or negative or neither. It is crucial to define if a message is positive or negative so you can compare it to the value rise or drop of the currency.</p>\n<p>Another possibility might be that we couldn&rsquo;t find any correlation between the social media messages and the rise and drop of the value. in that case it is not possible to make a end product. If we do find a correlation between the two there might also be a different reason behind the rise and drop that has nothing to do with the messages of social media.</p>\n<h2>Data</h2>\n<p>//welke data wordt er gebruikt en hoe hebben we het verbouwd tot bruikbare data<br/>[test][]</p>\n<h2>API</h2>\n<p>//API</p>\n<h2>Cleaning</h2>\n<p>For our concept the data needs little to no cleaning. The bitcoin value data is already structured data so this need no further cleaning. The data acquired from social media is already filtered so we only get the data we’re going to use.<br/>// misschien een screenshot hoe de data er uit ziet</p>\n<p>[TOC]</p>\n<ul>\n  <li>\n  <h1>Database</h1></li>\n  <li>\n  <h1>UI design</h1>= # Conclusion</li>\n</ul>\n<h2>Database</h2>\n<p>// welke database we gebruiken en waar de relaties liggen</p>\n<h2>UI design</h2>\n<p>// hoe ziet de UI eruit wat dingen uit zeppelin laten zien</p>\n<h2>Conclusion</h2>\n<p>// Beschrijven van de resultaten<br/>&ldquo;[test]&rdquo;</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1531419126808_-635451115","id":"20180712-181206_784501062","dateCreated":"2018-07-12T18:12:06+0000","dateStarted":"2018-07-12T19:29:52+0000","dateFinished":"2018-07-12T19:29:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:27319"},{"text":"%dep\nz.reset()\nz.load(\"org.mongodb.spark:mongo-spark-connector_2.10:2.2.0\")\n\n","user":"anonymous","dateUpdated":"2018-07-12T19:44:45+0000","config":{"lineNumbers":true,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Must be used before SparkInterpreter (%spark) initialized\nHint: put this paragraph before any Spark code and restart Zeppelin/Interpreter"}]},"apps":[],"jobName":"paragraph_1531307100096_1915927141","id":"20180710-233035_1668435806","dateCreated":"2018-07-11T11:05:00+0000","dateStarted":"2018-07-12T19:07:06+0000","dateFinished":"2018-07-12T19:07:06+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:27320"},{"text":"%pyspark\n\nimport os\nimport numpy\nimport scipy\nimport pandas\nimport tweepy\nfrom tweepy import Stream, OAuthHandler\nfrom tweepy.streaming import StreamListener\nimport time\n\n\nprint(\"numpy \" + numpy.__version__)\nprint(\"scipy \" + scipy.__version__)\nprint(\"pandas \" + pandas.__version__)\nprint(\"tweepy \" + tweepy.__version__)\n","user":"anonymous","dateUpdated":"2018-07-12T19:46:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","tableHide":false,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-4767957796635414228.py\", line 344, in <module>\n    code = compile('\\n'.join(final_code), '<stdin>', 'exec', ast.PyCF_ONLY_AST, 1)\n  File \"<stdin>\", line 9\n    %md\n    ^\nSyntaxError: invalid syntax\n"}]},"apps":[],"jobName":"paragraph_1531414549807_-456465135","id":"20180712-165549_1228920713","dateCreated":"2018-07-12T16:55:49+0000","dateStarted":"2018-07-12T19:46:02+0000","dateFinished":"2018-07-12T19:46:02+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:27321"},{"text":"%pyspark\nfrom pyspark.sql import SparkSession\n\nmy_spark = SparkSession \\\n    .builder \\\n    .appName(\"myApp\") \\\n    .config(\"spark.mongodb.input.uri\", \"mongodb://mongo/bigdata.btc_data\") \\\n    .config(\"spark.mongodb.output.uri\", \"mongodb://mongo/bigdata.btc_data\") \\\n    .getOrCreate()","user":"anonymous","dateUpdated":"2018-07-12T19:07:14+0000","config":{"lineNumbers":false,"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1531307100103_1914772894","id":"20180710-233419_422806309","dateCreated":"2018-07-11T11:05:00+0000","dateStarted":"2018-07-12T19:07:06+0000","dateFinished":"2018-07-12T19:07:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:27322"},{"text":"%pyspark\ndf = spark.read.format(\"com.mongodb.spark.sql.DefaultSource\").load()","user":"anonymous","dateUpdated":"2018-07-12T19:07:14+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1531307100105_1912464401","id":"20180710-234829_1225894091","dateCreated":"2018-07-11T11:05:00+0000","dateStarted":"2018-07-12T19:07:06+0000","dateFinished":"2018-07-12T19:07:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:27323"},{"text":"%pyspark\n\n\n\n# Consumer\nCONSUMER_KEY    = 'Tn4HvFmedD7GescAzlaSVsDrl'\nCONSUMER_SECRET = 'OvCRWGVWXq4fKrfFJdKUtDOB3AZpF6Y0qsrct0sKonTRsaH3OV'\n\n# Access\nACCESS_TOKEN    = '279339278-InUjsRFTM4bEkl4fZMOGSLbZug2ahy284oouh459'\nACCESS_SECRET   = 'CF6pCZerFXSUshKAbgH769px7eKew753WVWRAbrYULTBh'\n\nauth = OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)\napi = tweepy.API(auth)\n","user":"anonymous","dateUpdated":"2018-07-12T19:07:14+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1531314519600_1886101664","id":"20180711-130839_1261792278","dateCreated":"2018-07-11T13:08:39+0000","dateStarted":"2018-07-12T19:07:06+0000","dateFinished":"2018-07-12T19:07:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:27324"},{"text":"%pyspark\n\nTWITTER_ACCOUNT = z.input(\"Please enter a Twitter Account\")","user":"anonymous","dateUpdated":"2018-07-12T19:07:14+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","editorHide":true},"settings":{"params":{"twitterAccount":"","Please enter a Twitter Account":"tetherprinter"},"forms":{"Please enter a Twitter Account":{"name":"Please enter a Twitter Account","displayName":"Please enter a Twitter Account","type":"input","defaultValue":"","hidden":false,"$$hashKey":"object:27920"}}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1531416533780_227620577","id":"20180712-172853_781046412","dateCreated":"2018-07-12T17:28:53+0000","dateStarted":"2018-07-12T19:07:06+0000","dateFinished":"2018-07-12T19:07:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:27325"},{"text":"%pyspark\n\noptions\nfor tweet in tweepy.Cursor(api.user_timeline, id=TWITTER_ACCOUNT).items(2):\n    options.append(\"created\", tweet.created_at)\n    \nprint(options)\n","user":"anonymous","dateUpdated":"2018-07-12T19:07:14+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-4767957796635414228.py\", line 355, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'options' is not defined\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-4767957796635414228.py\", line 367, in <module>\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-4767957796635414228.py\", line 355, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'options' is not defined\n\n"}]},"apps":[],"jobName":"paragraph_1531417320233_1994133594","id":"20180712-174200_1891491041","dateCreated":"2018-07-12T17:42:00+0000","dateStarted":"2018-07-12T19:07:06+0000","dateFinished":"2018-07-12T19:07:07+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:27326"},{"text":"%pyspark\n\n# TWITTER_ACCOUNT = 'tetherprinter'\nprint(TWITTER_ACCOUNT)\ni = 0\nfor tweet in tweepy.Cursor(api.user_timeline, id=TWITTER_ACCOUNT).items(2):\n\n    unixTime = int(time.mktime(time.strptime(str(tweet.created_at), '%Y-%m-%d %H:%M:%S'))) - time.timezone\n    \n    filteredDF = df.filter(df['Timestamp'] >= (unixTime)).filter(df['Timestamp'] <= (unixTime + 900)).select('open', 'timestamp').sort('Timestamp', ascending=True)\n    filteredDF = filteredDF.withColumn('secondsSinceTweet', (filteredDF.timestamp - unixTime))\n    name = \"frame\" + str(i)\n    filteredDF.registerTempTable(name)\n    i = i + 1\n    z.show(filteredDF)","user":"anonymous","dateUpdated":"2018-07-12T19:07:14+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"lineChart","height":300,"optionOpen":true,"setting":{"lineChart":{}},"commonSetting":{},"keys":[{"name":"secondsSinceTweet","index":2,"aggr":"sum"}],"groups":[],"values":[{"name":"open","index":0,"aggr":"avg"}]},"helium":{}}},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"tetherprinter\n"},{"type":"TABLE","data":"open\ttimestamp\tsecondsSinceTweet\n6287.5\t1529947740\t6\n6282.99\t1529947800\t66\n6283.99\t1529947860\t126\n6282.84\t1529947920\t186\n6286.99\t1529947980\t246\n6284.99\t1529948040\t306\n6290.39\t1529948100\t366\n6286.99\t1529948160\t426\n6289.93\t1529948220\t486\n6284.74\t1529948280\t546\n6284.99\t1529948340\t606\n6284.99\t1529948400\t666\n6284.99\t1529948460\t726\n6278.7\t1529948520\t786\n6284.99\t1529948580\t846\n"},{"type":"TABLE","data":"open\ttimestamp\tsecondsSinceTweet\n6279.99\t1529947620\t9\n6290.98\t1529947680\t69\n6287.5\t1529947740\t129\n6282.99\t1529947800\t189\n6283.99\t1529947860\t249\n6282.84\t1529947920\t309\n6286.99\t1529947980\t369\n6284.99\t1529948040\t429\n6290.39\t1529948100\t489\n6286.99\t1529948160\t549\n6289.93\t1529948220\t609\n6284.74\t1529948280\t669\n6284.99\t1529948340\t729\n6284.99\t1529948400\t789\n6284.99\t1529948460\t849\n"}]},"apps":[],"jobName":"paragraph_1531317222393_557240784","id":"20180711-135342_2128701211","dateCreated":"2018-07-11T13:53:42+0000","dateStarted":"2018-07-12T19:07:07+0000","dateFinished":"2018-07-12T19:07:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:27327"},{"text":"%sql\nSELECT * FROM frame5\n-- SELECT * FROM frame4;","user":"anonymous","dateUpdated":"2018-07-12T19:07:14+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"setting":{"lineChart":{}},"commonSetting":{},"keys":[{"name":"secondsSinceTweet","index":2,"aggr":"sum"}],"groups":[],"values":[{"name":"open","index":0,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"open\ttimestamp\tsecondsSinceTweet\n9088.8\t1521610560\t41\n9080.39\t1521610620\t101\n9085.39\t1521610680\t161\n9075.34\t1521610740\t221\n9084.96\t1521610800\t281\n9079.41\t1521610860\t341\n9089.85\t1521610920\t401\n9094.09\t1521610980\t461\n9090.01\t1521611040\t521\n9084.58\t1521611100\t581\n9087.72\t1521611160\t641\n9092.53\t1521611220\t701\n9085.18\t1521611280\t761\n9092.15\t1521611340\t821\n9089.8\t1521611400\t881\n"}]},"apps":[],"jobName":"paragraph_1531322246465_-790160329","id":"20180711-151726_1239115529","dateCreated":"2018-07-11T15:17:26+0000","dateStarted":"2018-07-12T19:07:07+0000","dateFinished":"2018-07-12T19:07:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:27328"},{"text":"%sql\nSELECT * FROM frame4","user":"anonymous","dateUpdated":"2018-07-12T19:07:14+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"setting":{"lineChart":{}},"commonSetting":{},"keys":[{"name":"secondsSinceTweet","index":2,"aggr":"sum"}],"groups":[],"values":[{"name":"open","index":0,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"open\ttimestamp\tsecondsSinceTweet\n9080.39\t1521610620\t56\n9085.39\t1521610680\t116\n9075.34\t1521610740\t176\n9084.96\t1521610800\t236\n9079.41\t1521610860\t296\n9089.85\t1521610920\t356\n9094.09\t1521610980\t416\n9090.01\t1521611040\t476\n9084.58\t1521611100\t536\n9087.72\t1521611160\t596\n9092.53\t1521611220\t656\n9085.18\t1521611280\t716\n9092.15\t1521611340\t776\n9089.8\t1521611400\t836\n9089.81\t1521611460\t896\n"}]},"apps":[],"jobName":"paragraph_1531321983155_1649179991","id":"20180711-151303_1265144475","dateCreated":"2018-07-11T15:13:03+0000","dateStarted":"2018-07-12T19:07:07+0000","dateFinished":"2018-07-12T19:07:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:27329"},{"text":"%sql\nSELECT * FROM frame3","user":"anonymous","dateUpdated":"2018-07-12T19:07:14+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"setting":{"lineChart":{}},"commonSetting":{},"keys":[{"name":"secondsSinceTweet","index":2,"aggr":"sum"}],"groups":[],"values":[{"name":"open","index":0,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"open\ttimestamp\tsecondsSinceTweet\n9080.39\t1521610620\t42\n9085.39\t1521610680\t102\n9075.34\t1521610740\t162\n9084.96\t1521610800\t222\n9079.41\t1521610860\t282\n9089.85\t1521610920\t342\n9094.09\t1521610980\t402\n9090.01\t1521611040\t462\n9084.58\t1521611100\t522\n9087.72\t1521611160\t582\n9092.53\t1521611220\t642\n9085.18\t1521611280\t702\n9092.15\t1521611340\t762\n9089.8\t1521611400\t822\n9089.81\t1521611460\t882\n"}]},"apps":[],"jobName":"paragraph_1531315164503_-728515588","id":"20180711-131924_896518444","dateCreated":"2018-07-11T13:19:24+0000","dateStarted":"2018-07-12T19:07:19+0000","dateFinished":"2018-07-12T19:07:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:27330"},{"text":"%sql\nSELECT * FROM frame2","user":"anonymous","dateUpdated":"2018-07-12T19:07:14+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"setting":{"lineChart":{}},"commonSetting":{},"keys":[{"name":"secondsSinceTweet","index":2,"aggr":"sum"}],"groups":[],"values":[{"name":"open","index":0,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"open\ttimestamp\tsecondsSinceTweet\n9084.96\t1521610800\t24\n9079.41\t1521610860\t84\n9089.85\t1521610920\t144\n9094.09\t1521610980\t204\n9090.01\t1521611040\t264\n9084.58\t1521611100\t324\n9087.72\t1521611160\t384\n9092.53\t1521611220\t444\n9085.18\t1521611280\t504\n9092.15\t1521611340\t564\n9089.8\t1521611400\t624\n9089.81\t1521611460\t684\n9090.98\t1521611520\t744\n9092.0\t1521611580\t804\n9090.99\t1521611640\t864\n"}]},"apps":[],"jobName":"paragraph_1531317005048_-1882542293","id":"20180711-135005_1380021200","dateCreated":"2018-07-11T13:50:05+0000","dateStarted":"2018-07-12T19:07:31+0000","dateFinished":"2018-07-12T19:07:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:27331"},{"text":"%sql\nSELECT * FROM frame1","user":"anonymous","dateUpdated":"2018-07-12T19:07:40+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"setting":{"lineChart":{}},"commonSetting":{},"keys":[{"name":"secondsSinceTweet","index":2,"aggr":"sum"}],"groups":[],"values":[{"name":"open","index":0,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"open\ttimestamp\tsecondsSinceTweet\n6279.99\t1529947620\t9\n6290.98\t1529947680\t69\n6287.5\t1529947740\t129\n6282.99\t1529947800\t189\n6283.99\t1529947860\t249\n6282.84\t1529947920\t309\n6286.99\t1529947980\t369\n6284.99\t1529948040\t429\n6290.39\t1529948100\t489\n6286.99\t1529948160\t549\n6289.93\t1529948220\t609\n6284.74\t1529948280\t669\n6284.99\t1529948340\t729\n6284.99\t1529948400\t789\n6284.99\t1529948460\t849\n"}]},"apps":[],"jobName":"paragraph_1531322220875_1576968146","id":"20180711-151700_100406421","dateCreated":"2018-07-11T15:17:00+0000","dateStarted":"2018-07-12T19:07:40+0000","dateFinished":"2018-07-12T19:07:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:27332"},{"text":"%sql\nSELECT * FROM frame0","user":"anonymous","dateUpdated":"2018-07-12T19:07:49+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"setting":{"lineChart":{}},"commonSetting":{},"keys":[{"name":"secondsSinceTweet","index":2,"aggr":"sum"}],"groups":[],"values":[{"name":"open","index":0,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"open\ttimestamp\tsecondsSinceTweet\n6287.5\t1529947740\t6\n6282.99\t1529947800\t66\n6283.99\t1529947860\t126\n6282.84\t1529947920\t186\n6286.99\t1529947980\t246\n6284.99\t1529948040\t306\n6290.39\t1529948100\t366\n6286.99\t1529948160\t426\n6289.93\t1529948220\t486\n6284.74\t1529948280\t546\n6284.99\t1529948340\t606\n6284.99\t1529948400\t666\n6284.99\t1529948460\t726\n6278.7\t1529948520\t786\n6284.99\t1529948580\t846\n"}]},"apps":[],"jobName":"paragraph_1531322229251_-1842680078","id":"20180711-151709_754070699","dateCreated":"2018-07-11T15:17:09+0000","dateStarted":"2018-07-12T19:07:49+0000","dateFinished":"2018-07-12T19:08:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:27333"},{"text":"%sql\n","user":"anonymous","dateUpdated":"2018-07-12T19:07:14+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql","editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1531322953276_881949645","id":"20180711-152913_1768268045","dateCreated":"2018-07-11T15:29:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:27334"}],"name":"Big Data proof_of_concept","id":"2DK15VPEN","angularObjects":{"2DMBV515T:shared_process":[],"2DHAKN3K5:shared_process":[],"2DH842GUY:shared_process":[],"2DJ4VTUXM:shared_process":[],"2DKS3W4U9:shared_process":[],"2DK8A64GN:shared_process":[],"2DHQ76ZQP:shared_process":[],"2DJRK4JZQ:shared_process":[],"2DJJHWABV:shared_process":[]},"config":{"looknfeel":"simple","personalizedMode":"false"},"info":{}}